import logging
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, CommandHandler, ChatMemberHandler, ContextTypes

BOT_TOKEN = "REPLACE_WITH_MY_ACTUAL_BOT_TOKEN"
ADMIN_ID = MY_TELEGRAM_NUMERIC_ID  # Replace with my Telegram ID

logging.basicConfig(level=logging.INFO)

async def handle_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_user = update.chat_member.new_chat_member.user
    if new_user and not new_user.is_bot:
        chat_id = update.chat_member.chat.id
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=new_user.id,
            permissions=ChatPermissions(can_send_messages=False)
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"Hi @{new_user.username}, please verify you’re a UMFST student by sending your student ID or enrollment proof to the admin."
        )
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"New member @{new_user.username} is awaiting verification. Use /verify @{new_user.username} or /reject @{new_user.username}."
        )

async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("Usage: /verify @username")
        return
    username = context.args[0].lstrip('@')
    chat_id = update.effective_chat.id
    members = await context.bot.get_chat_administrators(chat_id)
    for member in members:
        if member.user.username == username:
            user_id = member.user.id
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            await context.bot.send_message(
                chat_id=user_id,
                text="✅ You’ve been verified! Welcome to the UMFST student community."
            )
            return
    await update.message.reply_text("User not found in group.")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("Usage: /reject @username")
        return
    username = context.args[0].lstrip('@')
    chat_id = update.effective_chat.id
    members = await context.bot.get_chat_administrators(chat_id)
    for member in members:
        if member.user.username == username:
            user_id = member.user.id
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await update.message.reply_text(f"@{username} has been removed from the group.")
            return
    await update.message.reply_text("User not found in group.")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(ChatMemberHandler(handle_new_member, ChatMemberHandler.CHAT_MEMBER))
app.add_handler(CommandHandler("verify", verify))
app.add_handler(CommandHandler("reject", reject))
app.run_polling()